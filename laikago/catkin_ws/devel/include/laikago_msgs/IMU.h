// Generated by gencpp from file laikago_msgs/IMU.msg
// DO NOT EDIT!


#ifndef LAIKAGO_MSGS_MESSAGE_IMU_H
#define LAIKAGO_MSGS_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laikago_msgs
{
template <class ContainerAllocator>
struct IMU_
{
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
    : quaternion()
    , gyroscope()
    , acceleration()
    , rpy()
    , temp(0.0)  {
      quaternion.assign(0.0);

      gyroscope.assign(0.0);

      acceleration.assign(0.0);

      rpy.assign(0.0);
  }
  IMU_(const ContainerAllocator& _alloc)
    : quaternion()
    , gyroscope()
    , acceleration()
    , rpy()
    , temp(0.0)  {
  (void)_alloc;
      quaternion.assign(0.0);

      gyroscope.assign(0.0);

      acceleration.assign(0.0);

      rpy.assign(0.0);
  }



   typedef boost::array<float, 4>  _quaternion_type;
  _quaternion_type quaternion;

   typedef boost::array<float, 3>  _gyroscope_type;
  _gyroscope_type gyroscope;

   typedef boost::array<float, 3>  _acceleration_type;
  _acceleration_type acceleration;

   typedef boost::array<float, 3>  _rpy_type;
  _rpy_type rpy;

   typedef float _temp_type;
  _temp_type temp;





  typedef boost::shared_ptr< ::laikago_msgs::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laikago_msgs::IMU_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_

typedef ::laikago_msgs::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::laikago_msgs::IMU > IMUPtr;
typedef boost::shared_ptr< ::laikago_msgs::IMU const> IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laikago_msgs::IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laikago_msgs::IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laikago_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'laikago_msgs': ['/home/unitree/catkin_ws/src/laikago_ros/laikago_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laikago_msgs::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laikago_msgs::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laikago_msgs::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laikago_msgs::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laikago_msgs::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laikago_msgs::IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laikago_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6067de14374c97a8666801686a8446fb";
  }

  static const char* value(const ::laikago_msgs::IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6067de14374c97a8ULL;
  static const uint64_t static_value2 = 0x666801686a8446fbULL;
};

template<class ContainerAllocator>
struct DataType< ::laikago_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laikago_msgs/IMU";
  }

  static const char* value(const ::laikago_msgs::IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laikago_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] quaternion\n\
float32[3] gyroscope\n\
float32[3] acceleration\n\
float32[3] rpy\n\
float32 temp\n\
";
  }

  static const char* value(const ::laikago_msgs::IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laikago_msgs::IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.quaternion);
      stream.next(m.gyroscope);
      stream.next(m.acceleration);
      stream.next(m.rpy);
      stream.next(m.temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laikago_msgs::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laikago_msgs::IMU_<ContainerAllocator>& v)
  {
    s << indent << "quaternion[]" << std::endl;
    for (size_t i = 0; i < v.quaternion.size(); ++i)
    {
      s << indent << "  quaternion[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quaternion[i]);
    }
    s << indent << "gyroscope[]" << std::endl;
    for (size_t i = 0; i < v.gyroscope.size(); ++i)
    {
      s << indent << "  gyroscope[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gyroscope[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acceleration[i]);
    }
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "temp: ";
    Printer<float>::stream(s, indent + "  ", v.temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAIKAGO_MSGS_MESSAGE_IMU_H
