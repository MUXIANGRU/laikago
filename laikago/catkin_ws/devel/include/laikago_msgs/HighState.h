// Generated by gencpp from file laikago_msgs/HighState.msg
// DO NOT EDIT!


#ifndef LAIKAGO_MSGS_MESSAGE_HIGHSTATE_H
#define LAIKAGO_MSGS_MESSAGE_HIGHSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <laikago_msgs/IMU.h>
#include <laikago_msgs/Cartesian.h>
#include <laikago_msgs/Cartesian.h>
#include <laikago_msgs/Cartesian.h>
#include <laikago_msgs/Cartesian.h>
#include <laikago_msgs/Cartesian.h>

namespace laikago_msgs
{
template <class ContainerAllocator>
struct HighState_
{
  typedef HighState_<ContainerAllocator> Type;

  HighState_()
    : levelFlag(0)
    , mode(0)
    , imu()
    , forwardSpeed(0.0)
    , sideSpeed(0.0)
    , rotateSpeed(0.0)
    , bodyHeight(0.0)
    , updownSpeed(0.0)
    , forwardPosition()
    , sidePosition()
    , footPosition2Body()
    , footSpeed2Body()
    , footForce()
    , tick(0)
    , wirelessRemote()
    , crc(0)
    , eeForce()
    , jointP()  {
      footForce.assign(0.0);

      wirelessRemote.assign(0);

      jointP.assign(0.0);
  }
  HighState_(const ContainerAllocator& _alloc)
    : levelFlag(0)
    , mode(0)
    , imu(_alloc)
    , forwardSpeed(0.0)
    , sideSpeed(0.0)
    , rotateSpeed(0.0)
    , bodyHeight(0.0)
    , updownSpeed(0.0)
    , forwardPosition(_alloc)
    , sidePosition(_alloc)
    , footPosition2Body()
    , footSpeed2Body()
    , footForce()
    , tick(0)
    , wirelessRemote()
    , crc(0)
    , eeForce()
    , jointP()  {
  (void)_alloc;
      footPosition2Body.assign( ::laikago_msgs::Cartesian_<ContainerAllocator> (_alloc));

      footSpeed2Body.assign( ::laikago_msgs::Cartesian_<ContainerAllocator> (_alloc));

      footForce.assign(0.0);

      wirelessRemote.assign(0);

      eeForce.assign( ::laikago_msgs::Cartesian_<ContainerAllocator> (_alloc));

      jointP.assign(0.0);
  }



   typedef uint8_t _levelFlag_type;
  _levelFlag_type levelFlag;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef  ::laikago_msgs::IMU_<ContainerAllocator>  _imu_type;
  _imu_type imu;

   typedef float _forwardSpeed_type;
  _forwardSpeed_type forwardSpeed;

   typedef float _sideSpeed_type;
  _sideSpeed_type sideSpeed;

   typedef float _rotateSpeed_type;
  _rotateSpeed_type rotateSpeed;

   typedef float _bodyHeight_type;
  _bodyHeight_type bodyHeight;

   typedef float _updownSpeed_type;
  _updownSpeed_type updownSpeed;

   typedef  ::laikago_msgs::Cartesian_<ContainerAllocator>  _forwardPosition_type;
  _forwardPosition_type forwardPosition;

   typedef  ::laikago_msgs::Cartesian_<ContainerAllocator>  _sidePosition_type;
  _sidePosition_type sidePosition;

   typedef boost::array< ::laikago_msgs::Cartesian_<ContainerAllocator> , 4>  _footPosition2Body_type;
  _footPosition2Body_type footPosition2Body;

   typedef boost::array< ::laikago_msgs::Cartesian_<ContainerAllocator> , 4>  _footSpeed2Body_type;
  _footSpeed2Body_type footSpeed2Body;

   typedef boost::array<float, 4>  _footForce_type;
  _footForce_type footForce;

   typedef uint32_t _tick_type;
  _tick_type tick;

   typedef boost::array<uint8_t, 40>  _wirelessRemote_type;
  _wirelessRemote_type wirelessRemote;

   typedef uint32_t _crc_type;
  _crc_type crc;

   typedef boost::array< ::laikago_msgs::Cartesian_<ContainerAllocator> , 4>  _eeForce_type;
  _eeForce_type eeForce;

   typedef boost::array<float, 12>  _jointP_type;
  _jointP_type jointP;





  typedef boost::shared_ptr< ::laikago_msgs::HighState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laikago_msgs::HighState_<ContainerAllocator> const> ConstPtr;

}; // struct HighState_

typedef ::laikago_msgs::HighState_<std::allocator<void> > HighState;

typedef boost::shared_ptr< ::laikago_msgs::HighState > HighStatePtr;
typedef boost::shared_ptr< ::laikago_msgs::HighState const> HighStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laikago_msgs::HighState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laikago_msgs::HighState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laikago_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'laikago_msgs': ['/home/unitree/catkin_ws/src/laikago_ros/laikago_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laikago_msgs::HighState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laikago_msgs::HighState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laikago_msgs::HighState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laikago_msgs::HighState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laikago_msgs::HighState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laikago_msgs::HighState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laikago_msgs::HighState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01d4600477cd3acd91bd469708ab5526";
  }

  static const char* value(const ::laikago_msgs::HighState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01d4600477cd3acdULL;
  static const uint64_t static_value2 = 0x91bd469708ab5526ULL;
};

template<class ContainerAllocator>
struct DataType< ::laikago_msgs::HighState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laikago_msgs/HighState";
  }

  static const char* value(const ::laikago_msgs::HighState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laikago_msgs::HighState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 levelFlag\n\
uint8 mode\n\
IMU imu\n\
float32 forwardSpeed\n\
float32 sideSpeed\n\
float32 rotateSpeed\n\
float32 bodyHeight\n\
float32 updownSpeed\n\
Cartesian forwardPosition       # (will be float type next version)\n\
Cartesian sidePosition          # (will be float type next version)\n\
Cartesian[4] footPosition2Body\n\
Cartesian[4] footSpeed2Body\n\
float32[4] footForce    \n\
uint32 tick               \n\
uint8[40] wirelessRemote\n\
uint32 crc\n\
\n\
# Under are not defined in SDK yet.\n\
Cartesian[4] eeForce            # It's a 1-DOF force in real robot, but 3-DOF is better for visualization.\n\
float32[12] jointP              # for visualization\n\
\n\
================================================================================\n\
MSG: laikago_msgs/IMU\n\
float32[4] quaternion\n\
float32[3] gyroscope\n\
float32[3] acceleration\n\
float32[3] rpy\n\
float32 temp\n\
================================================================================\n\
MSG: laikago_msgs/Cartesian\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::laikago_msgs::HighState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laikago_msgs::HighState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.levelFlag);
      stream.next(m.mode);
      stream.next(m.imu);
      stream.next(m.forwardSpeed);
      stream.next(m.sideSpeed);
      stream.next(m.rotateSpeed);
      stream.next(m.bodyHeight);
      stream.next(m.updownSpeed);
      stream.next(m.forwardPosition);
      stream.next(m.sidePosition);
      stream.next(m.footPosition2Body);
      stream.next(m.footSpeed2Body);
      stream.next(m.footForce);
      stream.next(m.tick);
      stream.next(m.wirelessRemote);
      stream.next(m.crc);
      stream.next(m.eeForce);
      stream.next(m.jointP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HighState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laikago_msgs::HighState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laikago_msgs::HighState_<ContainerAllocator>& v)
  {
    s << indent << "levelFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.levelFlag);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "imu: ";
    s << std::endl;
    Printer< ::laikago_msgs::IMU_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    s << indent << "forwardSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.forwardSpeed);
    s << indent << "sideSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.sideSpeed);
    s << indent << "rotateSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.rotateSpeed);
    s << indent << "bodyHeight: ";
    Printer<float>::stream(s, indent + "  ", v.bodyHeight);
    s << indent << "updownSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.updownSpeed);
    s << indent << "forwardPosition: ";
    s << std::endl;
    Printer< ::laikago_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "  ", v.forwardPosition);
    s << indent << "sidePosition: ";
    s << std::endl;
    Printer< ::laikago_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "  ", v.sidePosition);
    s << indent << "footPosition2Body[]" << std::endl;
    for (size_t i = 0; i < v.footPosition2Body.size(); ++i)
    {
      s << indent << "  footPosition2Body[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::laikago_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "    ", v.footPosition2Body[i]);
    }
    s << indent << "footSpeed2Body[]" << std::endl;
    for (size_t i = 0; i < v.footSpeed2Body.size(); ++i)
    {
      s << indent << "  footSpeed2Body[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::laikago_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "    ", v.footSpeed2Body[i]);
    }
    s << indent << "footForce[]" << std::endl;
    for (size_t i = 0; i < v.footForce.size(); ++i)
    {
      s << indent << "  footForce[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.footForce[i]);
    }
    s << indent << "tick: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tick);
    s << indent << "wirelessRemote[]" << std::endl;
    for (size_t i = 0; i < v.wirelessRemote.size(); ++i)
    {
      s << indent << "  wirelessRemote[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.wirelessRemote[i]);
    }
    s << indent << "crc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.crc);
    s << indent << "eeForce[]" << std::endl;
    for (size_t i = 0; i < v.eeForce.size(); ++i)
    {
      s << indent << "  eeForce[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::laikago_msgs::Cartesian_<ContainerAllocator> >::stream(s, indent + "    ", v.eeForce[i]);
    }
    s << indent << "jointP[]" << std::endl;
    for (size_t i = 0; i < v.jointP.size(); ++i)
    {
      s << indent << "  jointP[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jointP[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAIKAGO_MSGS_MESSAGE_HIGHSTATE_H
