# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laikago_msgs/MotorCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorCmd(genpy.Message):
  _md5sum = "6bbe425e3cd73a40e74b88b2f03b321c"
  _type = "laikago_msgs/MotorCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 mode                  # motor target mode
float32 position           # motor target position
float32 velocity           # motor target velocity
float32 positionStiffness  # motor spring stiffness coefficient
float32 velocityStiffness  # motor damper coefficient
float32 torque             # motor target torque"""
  __slots__ = ['mode','position','velocity','positionStiffness','velocityStiffness','torque']
  _slot_types = ['uint8','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,position,velocity,positionStiffness,velocityStiffness,torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.position is None:
        self.position = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.positionStiffness is None:
        self.positionStiffness = 0.
      if self.velocityStiffness is None:
        self.velocityStiffness = 0.
      if self.torque is None:
        self.torque = 0.
    else:
      self.mode = 0
      self.position = 0.
      self.velocity = 0.
      self.positionStiffness = 0.
      self.velocityStiffness = 0.
      self.torque = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B5f().pack(_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque,) = _get_struct_B5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B5f().pack(_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque,) = _get_struct_B5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B5f = None
def _get_struct_B5f():
    global _struct_B5f
    if _struct_B5f is None:
        _struct_B5f = struct.Struct("<B5f")
    return _struct_B5f
