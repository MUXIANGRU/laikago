# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laikago_msgs/LowCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import laikago_msgs.msg

class LowCmd(genpy.Message):
  _md5sum = "07bb727e47213ef7a2c819ad6a8669b1"
  _type = "laikago_msgs/LowCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 levelFlag
MotorCmd[20] motorCmd
LED[4] led
uint8[40] wirelessRemote
uint32 crc                # check bit
================================================================================
MSG: laikago_msgs/MotorCmd
uint8 mode                  # motor target mode
float32 position           # motor target position
float32 velocity           # motor target velocity
float32 positionStiffness  # motor spring stiffness coefficient
float32 velocityStiffness  # motor damper coefficient
float32 torque             # motor target torque
================================================================================
MSG: laikago_msgs/LED
uint8 r
uint8 g
uint8 b"""
  __slots__ = ['levelFlag','motorCmd','led','wirelessRemote','crc']
  _slot_types = ['uint8','laikago_msgs/MotorCmd[20]','laikago_msgs/LED[4]','uint8[40]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       levelFlag,motorCmd,led,wirelessRemote,crc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LowCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.levelFlag is None:
        self.levelFlag = 0
      if self.motorCmd is None:
        self.motorCmd = [laikago_msgs.msg.MotorCmd() for _ in range(20)]
      if self.led is None:
        self.led = [laikago_msgs.msg.LED() for _ in range(4)]
      if self.wirelessRemote is None:
        self.wirelessRemote = b'\0'*40
      if self.crc is None:
        self.crc = 0
    else:
      self.levelFlag = 0
      self.motorCmd = [laikago_msgs.msg.MotorCmd() for _ in range(20)]
      self.led = [laikago_msgs.msg.LED() for _ in range(4)]
      self.wirelessRemote = b'\0'*40
      self.crc = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.levelFlag))
      for val1 in self.motorCmd:
        _x = val1
        buff.write(_get_struct_B5f().pack(_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque))
      for val1 in self.led:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.r, _x.g, _x.b))
      _x = self.wirelessRemote
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_40B().pack(*_x))
      else:
        buff.write(_get_struct_40s().pack(_x))
      buff.write(_get_struct_I().pack(self.crc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.motorCmd is None:
        self.motorCmd = None
      if self.led is None:
        self.led = None
      end = 0
      start = end
      end += 1
      (self.levelFlag,) = _get_struct_B().unpack(str[start:end])
      self.motorCmd = []
      for i in range(0, 20):
        val1 = laikago_msgs.msg.MotorCmd()
        _x = val1
        start = end
        end += 21
        (_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque,) = _get_struct_B5f().unpack(str[start:end])
        self.motorCmd.append(val1)
      self.led = []
      for i in range(0, 4):
        val1 = laikago_msgs.msg.LED()
        _x = val1
        start = end
        end += 3
        (_x.r, _x.g, _x.b,) = _get_struct_3B().unpack(str[start:end])
        self.led.append(val1)
      start = end
      end += 40
      self.wirelessRemote = str[start:end]
      start = end
      end += 4
      (self.crc,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.levelFlag))
      for val1 in self.motorCmd:
        _x = val1
        buff.write(_get_struct_B5f().pack(_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque))
      for val1 in self.led:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.r, _x.g, _x.b))
      _x = self.wirelessRemote
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_40B().pack(*_x))
      else:
        buff.write(_get_struct_40s().pack(_x))
      buff.write(_get_struct_I().pack(self.crc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.motorCmd is None:
        self.motorCmd = None
      if self.led is None:
        self.led = None
      end = 0
      start = end
      end += 1
      (self.levelFlag,) = _get_struct_B().unpack(str[start:end])
      self.motorCmd = []
      for i in range(0, 20):
        val1 = laikago_msgs.msg.MotorCmd()
        _x = val1
        start = end
        end += 21
        (_x.mode, _x.position, _x.velocity, _x.positionStiffness, _x.velocityStiffness, _x.torque,) = _get_struct_B5f().unpack(str[start:end])
        self.motorCmd.append(val1)
      self.led = []
      for i in range(0, 4):
        val1 = laikago_msgs.msg.LED()
        _x = val1
        start = end
        end += 3
        (_x.r, _x.g, _x.b,) = _get_struct_3B().unpack(str[start:end])
        self.led.append(val1)
      start = end
      end += 40
      self.wirelessRemote = str[start:end]
      start = end
      end += 4
      (self.crc,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_40B = None
def _get_struct_40B():
    global _struct_40B
    if _struct_40B is None:
        _struct_40B = struct.Struct("<40B")
    return _struct_40B
_struct_40s = None
def _get_struct_40s():
    global _struct_40s
    if _struct_40s is None:
        _struct_40s = struct.Struct("<40s")
    return _struct_40s
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_B5f = None
def _get_struct_B5f():
    global _struct_B5f
    if _struct_B5f is None:
        _struct_B5f = struct.Struct("<B5f")
    return _struct_B5f
